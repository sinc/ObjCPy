#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright id East. 2011
#
#Objective-C help script
#

import re
import sys

def parse_hfile(h_file_name):
    '''Header files parser

    h_file_name - header file name
    '''
    try:
        f = open(h_file_name, 'r')
        hfile =f.read()
    finally:
        f.close()
    parsed_data = {}
    parsed_data['filename'] = h_file_name[:len(h_file_name)-2]
    #searching imports
    imports_pattern = re.compile('#import\s?[\<|\"](?P<imp>[\w\W]+?)[\>|\"]')
    imports = re.findall(imports_pattern, hfile)
    parsed_data['imports'] = imports
    #searching intrefaces
    intf_pattern = re.compile(
        '\@interface\s+(?P<intfname>[\w]+?)\s?\:\s?((?P<base>[\w]+?)\s?\<(?P<prot>[\w\W]+?)\>)?(?P<body>[\w\W]+?)@end')
    member_pattern = re.compile(
        '(?P<memb_type>[\w\<\>]+?\s?\*?)\s?(?P<memb_name>[\w]+?);')
    prop_pattern = re.compile(
        '\@property\s?\((?P<prop_args>[\w\W]+?)\)\s?(?P<prop_type>[\w]+?\s?\*?)\s?(?P<prop_name>[\w]+?);')
    method_pattern = re.compile(
        '(?P<meth_type>[\+|\-]\s?\([\w]+?\s?\*?\))\s?(?P<meth_name>[\w]+?)\s?(\:\s?((?P<meth_args>[\w\(\)\s\:\<\>\*]+?)\;)|\;)')
    parsed_data['interfaces'] = [dict([('name', intf.group('intfname')),
             ('base', intf.group('base')),
             ('protocols', intf.group('prot')),
             ('members', [dict([('name', prop.group('memb_name')),
                                ('type', prop.group('memb_type'))])
                            for prop in re.finditer(member_pattern, re.findall(re.compile('\{[\w\W]+?\}'), intf.group('body'))[0])]),
             ('properties', [dict([('name', prop.group('prop_name')),
                                   ('type', prop.group('prop_type'))])
                                for prop in re.finditer(prop_pattern, intf.group('body'))]),
             ('methods', [dict([('name', meth.group('meth_name')),
                                ('args', meth.group('meth_args')),
                                ('type', meth.group('meth_type'))])
                                for meth in re.finditer(method_pattern, intf.group('body'))])])
        for intf in re.finditer(intf_pattern, hfile)]
    return parsed_data

def build_m_file(h_file):
    h_data = parse_hfile(h_file)
    try:
        m_file = open(h_data['filename']+'.m', 'w')
        m_file.write('//This file generated by robots.\n')
        m_file.write('//Got milk? Then you are human and must be killed\n\n')
        m_file.write('#import "%s.h"\n' % h_data['filename'])
        for cls in h_data['interfaces']:
            m_file.write('\n\n@implementation %s\n\n' % cls['name'])
            for prop in cls['properties']:
                m_file.write('@synthesize %s;\n' % prop['name'])
            for meth in cls['methods']:
                if (meth['args']):
                    args = ''
                    conditions = ''
                    for arg in re.finditer('(?P<prefix>[\w]+?\:\s?)?\s?(?P<type>\([\w\<\s\>\*]+?\))\s?(?P<name>[\w]+)\s?', meth['args']):
                        if (arg.group('prefix')):
                            args += '%s\n' % arg.group('prefix')
                        args += '\t%s %s\n' % (arg.group('type'), arg.group('name'))
                        if ('*' in arg.group('type')):
                            if (len(conditions) > 1):
                                conditions += ' && '
                            conditions += '%s != nil' % arg.group('name')
                    m_file.write('\n%s\n%s:\n%s{\n' % (meth['type'].replace(' ',''), meth['name'], args))
                    if (len(conditions) > 1):
                        m_file.write('\tif (%s)\n\t{\n\t//Place your text here.\n\t}\n' % conditions)
                    else:
                        m_file.write('\t//Place your text here\n')
                    m_file.write('}\n')
                else:
                    m_file.write('\n%s\n%s\n{\n\t//Place your text here\n}\n' % (meth['type'], meth['name']))
            #dealloc
            dealloc_list = ''
            for memb in cls['members']:
                if ('*' in memb['type']):
                    dealloc_list += '\t[%s release];\n' % memb['name']
            m_file.write('\n-(void)\ndealloc\n{\n%s\n\t[super dealloc];\n}\n' % dealloc_list)
            m_file.write('\n@end')
    finally:
        m_file.close()

def main(argv=sys.argv):
    build_m_file(argv[1])

if __name__ == "__main__":
    sys.exit(main())